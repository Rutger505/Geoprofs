services:
  proxy:
    build:
      context: ./proxy/
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT}
        DOMAIN: ${DOMAIN}
    container_name: "proxy"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./proxy/ssl/:/ssl/"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"

  front-end:
    container_name: front-end
    build:
      context: ./front-end
      target: development
    develop:
      watch:
        - action: sync
          path: ./front-end/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./front-end/package.json
          target: /app
      labels:
        traefik.http.routers.front-end.rule: Host(`${DOMAIN}`)
        traefik.http.routers.front-end.tls: true


  back-end:
    container_name: back-end
    build:
      context: ./back-end
      target: development
    environment:
      DB_HOST: db
    env_file:
      - ./back-end/.env
    develop:
      watch:
        - action: sync
          path: ./back-end
          target: /var/www/html
        - action: rebuild
          path: ./back-end/composer.json
    depends_on:
      - db
    labels:
      traefik.http.routers.back-end.rule: Host(`${DOMAIN}`) && PathPrefix(`/api`)
      traefik.http.routers.back-end.tls: true

  db:
    container_name: db
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - geoprofs_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  geoprofs_postgres_data: